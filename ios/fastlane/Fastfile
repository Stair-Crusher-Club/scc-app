# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

def target_identifier(scheme:)
    case scheme
    when "sandbox"
      "club.staircrusher.sandbox"
    when "production"
      "club.staircrusher"
    end
end

def target_configuration(type:, scheme:)
    case scheme
    when "sandbox"
      "#{type}Sandbox"
    when "production"
      "#{type}"
    end
end

def target_scheme(scheme:)
    case scheme
    when "sandbox"
      "StairCrusherClubSandbox"
    when "production"
      "StairCrusherClub"
    end
end

# Get the next build number from the current bundle version
def next_build_number()
  info_plist_path = File.expand_path("../sccReactNative/Info.plist")
  current_build = get_info_plist_value(path: info_plist_path, key: 'CFBundleVersion').to_i
  return current_build + 1
end

def bundle_version()
  info_plist_path = File.expand_path("../sccReactNative/Info.plist")
  get_info_plist_value(path: info_plist_path, key: 'CFBundleVersion')
end

platform :ios do
  desc ""

  desc "Make a archive file. You can make IPA files using the archive file."
  lane :rbuild do |options|
    scheme = target_scheme(scheme: options[:scheme])
    identifier = target_identifier(scheme: options[:scheme])
    configuration = target_configuration(type: "Release", scheme: options[:scheme])
    match(
      type: "appstore",
      api_key_path: File.expand_path("../../subprojects/scc-frontend-build-configurations/appstore-key.json"),
      app_identifier: identifier,
      force_for_new_devices: true,
      verbose: true
    )
    build_app(
      scheme: scheme,
      configuration: configuration,
      clean: true,
      skip_package_ipa: true,
      build_path: "./build/#{options[:scheme]}"
    )
    sh("mv", "../" + lane_context[SharedValues::XCODEBUILD_ARCHIVE], "../build/#{options[:scheme]}/StairCrusherClub-#{bundle_version()}.xcarchive")
  end

  desc "Make IPA file for AppStore. It can be distributed in AppStore."
  lane :export_appstore do |options|
    scheme = target_scheme(scheme: options[:scheme])
    identifier = target_identifier(scheme: options[:scheme])
    configuration = target_configuration(type: "Release", scheme: options[:scheme])
    bundle_version = bundle_version()
    match(
      type: "appstore",
      api_key_path: File.expand_path("../../subprojects/scc-frontend-build-configurations/appstore-key.json"),
      app_identifier: identifier,
      force_for_new_devices: true,
      verbose: true
    )
    build_app(
      scheme: scheme,
      configuration: configuration,
      skip_build_archive: true,
      archive_path: "./build/#{options[:scheme]}/StairCrusherClub-#{bundle_version}.xcarchive",
      export_method: "app-store",
      output_directory: "./build/#{options[:scheme]}",
      output_name: "StairCrusherClub-#{bundle_version}.ipa"
    )
  end

  desc "Make IPA file for Firebase Distribution."
  lane :export_firebase do |options|
    identifier = target_identifier(scheme: options[:scheme])
    scheme = target_scheme(scheme: options[:scheme])
    configuration = target_configuration(type: "Release", scheme: options[:scheme])
    bundler_version = bundle_version()
    match(
      type: "adhoc",
      api_key_path: File.expand_path("../../subprojects/scc-frontend-build-configurations/appstore-key.json"),
      app_identifier: identifier,
      force_for_new_devices: true,
      verbose: true
    )
    build_app(
      scheme: scheme,
      configuration: configuration,
      skip_build_archive: true,
      archive_path: "./build/#{options[:scheme]}/StairCrusherClub-#{bundle_version}.xcarchive",
      export_method: "ad-hoc",
      output_directory: "./build/#{options[:scheme]}",
      output_name: "StairCrusherClub-Firebase-#{bundle_version}.ipa"
    )
  end

  desc "Upload IPA file to Firebase App Distribution."
  lane :firebase do |options|
    config = read_json(
      json_path: File.expand_path("../../subprojects/scc-frontend-build-configurations/#{options[:scheme]}/ios.json")
    )
    firebase_app_distribution(
      app: config[:firebase_app_id],
      firebase_cli_token: config[:firebase_cli_token],
      ipa_path: File.expand_path("../build/#{options[:scheme]}/StairCrusherClub-Firebase-#{bundle_version()}.ipa"),
      groups: "Product",
      release_notes: "Version #{options[:version]} (#{next_build_number()})"
    )
  end

  desc "Upload a IPA file to AppStoreConnect."
  lane :itc do |options|
    identifier = target_identifier(scheme: options[:scheme])
    upload_to_testflight(
      api_key_path: File.expand_path("../../subprojects/scc-frontend-build-configurations/appstore-key.json"),
      app_identifier: identifier,
      ipa: File.expand_path("../build/#{options[:scheme]}/StairCrusherClub-#{bundle_version()}.ipa"),
      beta_app_description: "계단뿌셔클럽",
      skip_waiting_for_build_processing: true
    )
  end

  desc "Make IPA files for AppStore and Firebase Distribution. After this, you can upload the ipa files to Firebase Distribution and AppStore Connect using `fastlane ios firebase` or `fastlane ios itc`"
  lane :export do |options|
    sh("rm -rf #{File.expand_path("../build/#{options[:scheme]}")}")
    increment_version_number(
      version_number: options[:version]
    )
    increment_build_number(
      build_number: next_build_number() + 1
    )
    rbuild(scheme: options[:scheme])
    export_appstore(scheme: options[:scheme])
    export_firebase(scheme: options[:scheme])
  end

  lane :release_candidate do |options|
    version = prompt(text: "What version do you want to build? ex) 0.1.4")
    unless version.to_s.strip.empty?
      matched = version.match(/([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})$/)
      if matched.nil?
        UI.user_error!("Version is wrong. You should specify correct version like 0.1.4, 1.13.12")
      end
    end
    export(scheme: options[:scheme], version: version)
    firebase(scheme: options[:scheme], version: version)
    itc(scheme: options[:scheme])
  end
end
