
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
 #pragma once

 #include <react/renderer/components/view/ViewProps.h>
 #include <react/renderer/core/PropsParserContext.h>
 #include <react/renderer/core/propsConversions.h>
 #include <vector>
 
 namespace facebook::react {
 
 struct SccMapViewMarkersMarkerIconStruct {
   std::string icon{};
   std::string color{};
   int width{0};
   int height{0};
 };
 
 static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, SccMapViewMarkersMarkerIconStruct &result) {
   auto map = (std::unordered_map<std::string, RawValue>)value;
 
   auto tmp_icon = map.find("icon");
   if (tmp_icon != map.end()) {
     fromRawValue(context, tmp_icon->second, result.icon);
   }
   auto tmp_color = map.find("color");
   if (tmp_color != map.end()) {
     fromRawValue(context, tmp_color->second, result.color);
   }
   auto tmp_width = map.find("width");
   if (tmp_width != map.end()) {
     fromRawValue(context, tmp_width->second, result.width);
   }
   auto tmp_height = map.find("height");
   if (tmp_height != map.end()) {
     fromRawValue(context, tmp_height->second, result.height);
   }
 }
 
 static inline std::string toString(const SccMapViewMarkersMarkerIconStruct &value) {
   return "[Object SccMapViewMarkersMarkerIconStruct]";
 }
 
 struct SccMapViewMarkersLocationStruct {
   double lat{0.0};
   double lng{0.0};
 };
 
 static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, SccMapViewMarkersLocationStruct &result) {
   auto map = (std::unordered_map<std::string, RawValue>)value;
 
   auto tmp_lat = map.find("lat");
   if (tmp_lat != map.end()) {
     fromRawValue(context, tmp_lat->second, result.lat);
   }
   auto tmp_lng = map.find("lng");
   if (tmp_lng != map.end()) {
     fromRawValue(context, tmp_lng->second, result.lng);
   }
 }
 
 static inline std::string toString(const SccMapViewMarkersLocationStruct &value) {
   return "[Object SccMapViewMarkersLocationStruct]";
 }
 
 struct SccMapViewMarkersStruct {
   std::string id{};
   SccMapViewMarkersMarkerIconStruct markerIcon{};
   std::string displayName{};
   SccMapViewMarkersLocationStruct location{};
 };
 
 static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, SccMapViewMarkersStruct &result) {
   auto map = (std::unordered_map<std::string, RawValue>)value;
 
   auto tmp_id = map.find("id");
   if (tmp_id != map.end()) {
     fromRawValue(context, tmp_id->second, result.id);
   }
   auto tmp_markerIcon = map.find("markerIcon");
   if (tmp_markerIcon != map.end()) {
     fromRawValue(context, tmp_markerIcon->second, result.markerIcon);
   }
   auto tmp_displayName = map.find("displayName");
   if (tmp_displayName != map.end()) {
     fromRawValue(context, tmp_displayName->second, result.displayName);
   }
   auto tmp_location = map.find("location");
   if (tmp_location != map.end()) {
     fromRawValue(context, tmp_location->second, result.location);
   }
 }
 
 static inline std::string toString(const SccMapViewMarkersStruct &value) {
   return "[Object SccMapViewMarkersStruct]";
 }
 
 static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<SccMapViewMarkersStruct> &result) {
   auto items = (std::vector<RawValue>)value;
   for (const auto &item : items) {
     SccMapViewMarkersStruct newItem;
     fromRawValue(context, item, newItem);
     result.emplace_back(newItem);
   }
 }
 
 
 struct SccMapViewInitialRegionStruct {
   double northEastLat{0.0};
   double northEastLng{0.0};
   double southWestLat{0.0};
   double southWestLng{0.0};
 };
 
 static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, SccMapViewInitialRegionStruct &result) {
   auto map = (std::unordered_map<std::string, RawValue>)value;
 
   auto tmp_northEastLat = map.find("northEastLat");
   if (tmp_northEastLat != map.end()) {
     fromRawValue(context, tmp_northEastLat->second, result.northEastLat);
   }
   auto tmp_northEastLng = map.find("northEastLng");
   if (tmp_northEastLng != map.end()) {
     fromRawValue(context, tmp_northEastLng->second, result.northEastLng);
   }
   auto tmp_southWestLat = map.find("southWestLat");
   if (tmp_southWestLat != map.end()) {
     fromRawValue(context, tmp_southWestLat->second, result.southWestLat);
   }
   auto tmp_southWestLng = map.find("southWestLng");
   if (tmp_southWestLng != map.end()) {
     fromRawValue(context, tmp_southWestLng->second, result.southWestLng);
   }
 }
 
 static inline std::string toString(const SccMapViewInitialRegionStruct &value) {
   return "[Object SccMapViewInitialRegionStruct]";
 }
 
 struct SccMapViewMapPaddingStruct {
   int top{0};
   int right{0};
   int bottom{0};
   int left{0};
 };
 
 static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, SccMapViewMapPaddingStruct &result) {
   auto map = (std::unordered_map<std::string, RawValue>)value;
 
   auto tmp_top = map.find("top");
   if (tmp_top != map.end()) {
     fromRawValue(context, tmp_top->second, result.top);
   }
   auto tmp_right = map.find("right");
   if (tmp_right != map.end()) {
     fromRawValue(context, tmp_right->second, result.right);
   }
   auto tmp_bottom = map.find("bottom");
   if (tmp_bottom != map.end()) {
     fromRawValue(context, tmp_bottom->second, result.bottom);
   }
   auto tmp_left = map.find("left");
   if (tmp_left != map.end()) {
     fromRawValue(context, tmp_left->second, result.left);
   }
 }
 
 static inline std::string toString(const SccMapViewMapPaddingStruct &value) {
   return "[Object SccMapViewMapPaddingStruct]";
 }
 class SccMapViewProps final : public ViewProps {
  public:
   SccMapViewProps() = default;
   SccMapViewProps(const PropsParserContext& context, const SccMapViewProps &sourceProps, const RawProps &rawProps);
 
 #pragma mark - Props
 
   std::vector<SccMapViewMarkersStruct> markers{};
   std::string selectedItemId{};
   SccMapViewInitialRegionStruct initialRegion{};
   SccMapViewMapPaddingStruct mapPadding{};
 };
 
 } // namespace facebook::react
 