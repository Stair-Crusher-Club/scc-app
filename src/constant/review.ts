import {
  EntranceDoorType,
  RecommendedMobilityTypeDto,
  SpaciousTypeDto,
  ToiletLocationTypeDto,
  UserMobilityToolDto,
} from '@/generated-sources/openapi';

type UserMobilityToolMap = typeof UserMobilityToolDto;

export type UserMobilityToolMapDto = UserMobilityToolMap[keyof Omit<
  UserMobilityToolMap,
  'FriendOfToolUser' | 'Cluch'
>];

export const MOBILITY_TOOL_LABELS: Record<UserMobilityToolMapDto, string> = {
  [UserMobilityToolDto.ManualWheelchair]: 'ÏàòÎèôÌú†Ï≤¥Ïñ¥',
  [UserMobilityToolDto.ElectricWheelchair]: 'Ï†ÑÎèôÌú†Ï≤¥Ïñ¥',
  [UserMobilityToolDto.ManualAndElectricWheelchair]: 'ÏàòÏ†ÑÎèôÌú†Ï≤¥Ïñ¥',
  [UserMobilityToolDto.WalkingAssistanceDevice]: 'Î≥¥ÌñâÎ≥¥Ï°∞ÎèÑÍµ¨',
  [UserMobilityToolDto.ProstheticFoot]: 'ÏùòÏ°±',
  [UserMobilityToolDto.Stroller]: 'Ïú†ÏïÑÏ∞® ÎèôÎ∞ò',
  [UserMobilityToolDto.None]: 'Ìï¥ÎãπÏóÜÏùå',
};

export const MOBILITY_TOOL_OPTIONS = Object.entries(MOBILITY_TOOL_LABELS)
  .filter(([value]) => value !== UserMobilityToolDto.FriendOfToolUser)
  .map(([value, label]) => ({
    value: value as UserMobilityToolDto,
    label,
  }));

export function getMobilityToolDefaultValue(
  mobilityTools?: UserMobilityToolDto[],
) {
  const validOrder = Object.keys(
    MOBILITY_TOOL_LABELS,
  ) as UserMobilityToolMapDto[];
  return validOrder.find(tool => mobilityTools?.includes(tool));
}

export const RECOMMEND_MOBILITY_TOOL_LABELS: Record<
  RecommendedMobilityTypeDto,
  string
> = {
  [RecommendedMobilityTypeDto.ManualWheelchair]: 'ÏàòÎèôÌú†Ï≤¥Ïñ¥',
  [RecommendedMobilityTypeDto.ElectricWheelchair]: 'Ï†ÑÎèôÌú†Ï≤¥Ïñ¥',
  [RecommendedMobilityTypeDto.Elderly]: 'Í≥†Î†πÏûê',
  [RecommendedMobilityTypeDto.Stroller]: 'Ïú†ÏïÑÏ∞® ÎèôÎ∞ò',
  [RecommendedMobilityTypeDto.NotSure]: 'Î™®Î¶Ñ',
  [RecommendedMobilityTypeDto.None]: 'Ï∂îÏ≤úÏïàÌï®',
};

export const SPACIOUS_LABELS: Record<SpaciousTypeDto, string> = {
  [SpaciousTypeDto.Wide]: 'ü•∞ Îß§Ïö∞ ÎÑìÏñ¥ Ïù¥Ïö©ÌïòÍ∏∞ ÏïÑÏ£º Ìé∏Î¶¨Ìï¥Ïöî',
  [SpaciousTypeDto.Enough]: 'üòÄ ÎåÄÎ∂ÄÎ∂Ñ Íµ¨Ïó≠ÏóêÏÑú Î¨∏Ï†úÏóÜÏù¥ Ïù¥Ïö©Ìï† Ïàò ÏûàÏñ¥Ïöî',
  [SpaciousTypeDto.Limited]: 'üôÇ ÏùºÎ∂Ä Íµ¨Ïó≠Îßå Ïù¥Ïö©Ìï† Ïàò ÏûàÏñ¥Ïöî',
  [SpaciousTypeDto.Tight]: 'ü•≤ Îß§Ïö∞ Ï¢ÅÏïÑ ÎÇ¥Î∂Ä Ïù¥ÎèôÏù¥ Í±∞Ïùò Î∂àÍ∞ÄÎä•Ìï¥Ïöî',
};

export const SPACIOUS_OPTIONS = Object.entries(SPACIOUS_LABELS).map(
  ([value, label]) => ({
    value: value as SpaciousTypeDto,
    label,
  }),
);

export const RECOMMEND_MOBILITY_TOOL_OPTIONS = Object.entries(
  RECOMMEND_MOBILITY_TOOL_LABELS,
).map(([value, label]) => ({
  value: value as RecommendedMobilityTypeDto,
  label,
}));

export const makeRecommendedMobilityOptions = (
  currentOptions: RecommendedMobilityTypeDto[],
) => {
  const isNoneSelected = currentOptions.includes(
    RecommendedMobilityTypeDto.None,
  );
  const isNotSureSelected = currentOptions.includes(
    RecommendedMobilityTypeDto.NotSure,
  );
  const isAnyOtherSelected =
    currentOptions.length > 0 &&
    currentOptions.some(
      opt =>
        opt !== RecommendedMobilityTypeDto.None &&
        opt !== RecommendedMobilityTypeDto.NotSure,
    );

  return Object.entries(RECOMMEND_MOBILITY_TOOL_LABELS).map(([key, label]) => {
    const value = key as RecommendedMobilityTypeDto;
    const isNone = value === RecommendedMobilityTypeDto.None;
    const isNotSure = value === RecommendedMobilityTypeDto.NotSure;

    let isDisabled = false;
    if (isNoneSelected) {
      isDisabled = !isNone;
    } else if (isNotSureSelected) {
      isDisabled = !isNotSure;
    } else if (isAnyOtherSelected) {
      isDisabled = isNone || isNotSure;
    }

    return {
      label,
      value,
      disabled: isDisabled,
    };
  });
};

type ToiletLocationTypeMap = typeof ToiletLocationTypeDto;

export type ToiletLocationTypeDtoWithoutNotSure =
  ToiletLocationTypeMap[keyof Omit<ToiletLocationTypeMap, 'NotSure'>];

export const TOILET_LOCATION_TYPE_LABELS: Record<
  ToiletLocationTypeDtoWithoutNotSure,
  string
> = {
  [ToiletLocationTypeDto.Place]: 'Îß§Ïû• ÎÇ¥Î∂ÄÏóê ÏûàÏùå',
  [ToiletLocationTypeDto.Building]: 'Í±¥Î¨º ÎÇ¥ ÏûàÏùå',
  [ToiletLocationTypeDto.None]: 'ÏóÜÏùå',
  [ToiletLocationTypeDto.Etc]: 'Í∏∞ÌÉÄ',
};

export const TOILET_LOCATION_TYPE_OPTIONS = Object.entries(
  TOILET_LOCATION_TYPE_LABELS,
).map(([value, label]) => ({
  value: value as ToiletLocationTypeDtoWithoutNotSure,
  label,
}));

type DoorTypeMap = typeof EntranceDoorType;

type DoorTypeMapDto = DoorTypeMap[keyof Omit<
  DoorTypeMap,
  'Revolving' | 'None'
>];

export const DOOR_TYPE_LABELS: Record<DoorTypeMapDto, string> = {
  Sliding: 'ÎØ∏Îã´Ïù¥Î¨∏(ÏòÜÏúºÎ°ú ÎØ∏Îäî Ïä¨ÎùºÏù¥Îî© Î¨∏)',
  Hinged: 'Ïó¨Îã´Ïù¥Î¨∏(Ïïû/Îí§Î°ú Ïó¨Îäî Î¨∏)',
  Automatic: 'ÏûêÎèôÎ¨∏(Î≤ÑÌäº)',
  ETC: 'Í∏∞ÌÉÄ',
};

export const DOOR_TYPE_OPTIONS = Object.entries(DOOR_TYPE_LABELS).map(
  ([value, label]) => ({
    value: value as DoorTypeMapDto,
    label,
  }),
);
